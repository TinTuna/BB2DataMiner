class RulesEventGameFinished():
    MatchResult = {
        'CompletionStatus': -1,
        'IdMatchForSelfValidation': -1,
        'UseLobbyTeams': -1,
        'IdLeague': -1,
        'Session': '',
        'CoachResults': [{
            'IdCoach': -1,
            'NbDisconnects': -1,
            'TeamResult': {
                'LobbyId': '',
                'TeamData': {
                    'LobbyId': '',
                    'Value': -1,
                    'Name': '',
                    'Predefined': -1,
                    'IdCheerleadersRace': -1,
                    'TeamId': -1,
                    'IdRace': -1,
                    'Reroll': -1,
                    'Logo': '',
                    'CoachSlot': -1,
                    'TeamColor': -1
                },
            },
            'PopularityGain': -1,
            'NbSupporters': -1,
            'PlayerResults': [{
                'PlayerResult': {
                    'Statistics': {
                        'InflictedTackles': -1,
                        'MatchPlayed': -1,
                        'MVP': -1,
                        'DicesStat': {
                            'BlockDistrib': '',
                            'Roll': [{
                                'RowRollStatistics': {
                                    'RollType': -1,
                                    'Success': -1,
                                    'Failure': -1,
                                },
                            }],
                            'Block': [{
                                'RowBlockStatistics': {
                                    'Attacker': '',
                                    'Choice': -1,
                                    'Dices': '',
                                    'Red': -1,
                                    'Defender': '',
                                },
                            }],
                        },
                        'IdPlayerListing': -1,
                    },
                    'PlayerData': {
                        'LobbyId': '',
                        'Ma': -1,
                        'Name': '',
                        'Ag': -1,
                        'Level': -1,
                        'Number': -1,
                        'Experience': -1,
                        'IdHead': -1,
                        'TeamId': -1,
                        'Value': -1,
                        'Av': -1,
                        'St': -1,
                        'ListSkills': '',
                        'Id': -1,
                        'IdPlayerTypes': -1,
                    },
                },
            }],
            'Row': {
                'HomeInflictedInjuries': -1,
                'TeamAwayLogo': '',
                'AwayCashEarnedBeforeConcession': -1,
                'HomeOccupationOwn': -1,
                'AwaySustainedKO': -1,
                'AwayInflictedInjuries': -1,
                'ClientVersion': '',
                'AwayValue': -1,
                'CoachAwayName': -1,
                'IdCoachHome': -1,
                'ReplayFileName': '',
                'AwayWinningsDice': -1,
                'AwayInflictedTackles': -1,
                'AwayInflictedPasses': -1,
                'HomePossessionBall': -1,
                'AwayOccupationOwn': -1,
                'HomeCashBeforeMatch': -1,
                'CoachHomeName': -1,
                'IdTeamListingHome': -1,
                'AwayInflictedCasualties': -1,
                'HomeOccupationTheir': -1,
                'AwayPopularityBeforeMatch': -1,
                'HomeSustainedTackles': -1,
                'ShardedIdTeamListingAway': {
                    'Value': '',
                },
                'HomeCashEarnedBeforeConcession': -1,
                'AwayInflictedMetersRunning': -1,
                'IdCoachAway': -1,
                'HomeSustainedKO': -1,
                'AwayMVP': -1,
                'HomeMVP': -1,
                'HomePopularityGain': -1,
                'HomeInflictedMetersRunning': -1,
                'ShardedIdTeamListingHome': {
                    'Value': '',
                },
                'IdCompetition': -1,
                'IdRacesAway': -1,
                'HomeSustainedCasualties': -1,
                'LevelCabalVision': -1,
                'AwaySustainedTackles': -1,
                'HomeSustainedInjuries': -1,
                'Stadium': '',
                'AwayPossessionBall': -1,
                'IdRacesHome': -1,
                'HomeInflictedTackles': -1,
                'HomeCashEarned': -1,
                'HomeInflictedCasualties': -1,
                'Finished': '',
                'AwayInflictedKO': -1,
                'AwayCashBeforeMatch': -1,
                'NameStadium': '',
                'HomeWinningsDice': -1,
                'AwayOccupationTheir': -1,
                'TeamHomeName': '',
                'AwayInflictedMetersPassing': -1,
                'HomeNbSupporters': -1,
                'TeamAwayName': '',
                'HomeValue': -1,
                'TeamHomeLogo': '',
                'AwaySustainedInjuries': -1,
                'AwaySustainedCasualties': -1,
                'AwayPopularityGain': -1,
                'IdTeamListingAway': -1,
                'HomeInflictedKO': -1,
                'AwayNbSupporters': -1,
                'CompetitionFlags': -1,
                'AwayCashEarned': -1,
                'AwayInflictedCatches': -1,
                'LevelStadium': -1,
            },
        }],
    }

    def __init__(self, opts) -> None:
        for key in opts:
            self.__setitem__(key, opts[key])

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)
